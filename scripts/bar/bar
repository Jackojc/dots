#!/usr/bin/env sh

perc=2  # Bar offset from edges of screen

wm=
time=
date=
battery=

hotkey=
pressed=

# BAR_ID=

# If this is set to 1, visibility requests are ignored
toggle_visibility=1

move_bar() {
	# >&2 echo "id = $(xdotool search --name $BAR_NAME | head -n1)"

	backup_ifs="$IFS"; unset IFS

	# Get bar width and height
	set $(xdotool getwindowgeometry $(xdotool search --name $BAR_NAME | head -n1) | rg -o '\d+' | tail -n2)

	bar_width="$1"
	bar_height="$2"

	# Get screen position and size
	set $(bspc query -T -m | jq -r '[.rectangle[],.borderWidth][]')

	screen_x=$1
	screen_y=$2
	screen_w=$3
	screen_h=$4
	border=$5

	# Find shortest axis
	shortest=$(( screen_w < screen_h ? screen_w : screen_h ))
	resize_px=$(( ( shortest * perc ) / 100 ))

	new_w=$((screen_w - (resize_px * 2)))
	new_x=$((screen_x + resize_px - (border / 2)))
	new_y=$((screen_y + screen_h - bar_height - resize_px + (border * 2)))

	xdotool windowmove $(xdotool search --name $BAR_NAME | head -n1) $new_x $new_y windowsize $(xdotool search --name $BAR_NAME | head -n1) $new_w h

	IFS="$backup_ifs"
}

raise() {
	xdotool windowraise $(xdotool search --name $BAR_NAME | head -n1)
}

show() {
	move_bar
	raise
	xdotool windowmap $(xdotool search --name $BAR_NAME | head -n1)
}

hide() {
	xdotool windowunmap $(xdotool search --name $BAR_NAME | head -n1)
}

while read -r line; do
	pgrep -f "$BAR_NAME" >/dev/null 2>&1 || exit 1

	case "$line" in
		# I*) BAR_ID="${line#?}" ;;

		S*) [ "$toggle_visibility" = 1 ] && show ;; # Show the bar
		U*) [ "$toggle_visibility" = 1 ] && hide ;; # Hide the bar

		D*) date=" ${line#?} " ;; # Date
		T*) time=" ${line#?} " ;; # Time
		B*) # Battery
			power_has_battery && battery=" ${line#?} "
		;;

		H*) # SXHKD
			item="${line#?}"

			# We capture chord begin events
			# and the key which started the chord
			# so we can display it on the statusbar.
			case "$item" in
				H*) pressed="${item#?}" ;; # Hotkey

				B*) # Begin chain
					toggle_visibility=0 # Show the bar and prevent hide/show requests
					show
					hotkey=" CHORD (${pressed}) "
				;;

				E*)
					toggle_visibility=1 # Hide the bar again and re-enable hide/show requests
					hide
					hotkey=
				;; # End chain

				T*) ;; # Timeout
				C*) ;; # Command
			esac
		;;

		# Window manager events.
		W*)
			# https://github.com/baskerville/bspwm/blob/master/doc/bspwm.1.asciidoc#report-format
			# raise
			wm=

			IFS=':'
			set -- ${line#?}

			while [ $# -gt 0 ]; do
				item=$1
				name=${item#?}

				case "$item" in
					# Monitors
						[m]*)
							shift  # Skip this one.

							while [ $# -gt 0 ]; do
								# Shift until next monitor report.
								case "$1" in
									M*) break ;;
									*) shift ;;
								esac
							done

							# Break outer loop if we consumed everything.
							[ $# -eq 0 ] && break
						;; # Monitor (unfocused)

						M*)

						;; # Monitor (focused)

					# Desktops/Workspaces
						o*) # Occupied desktop (unfocused)
							wm="${wm} ${name} "
						;;

						[OF]*) # Occupied/Free desktop (focused)
							wm="${wm}%{R} ${name} %{R}"
						;;

						f*) ;; # Free desktop unfocused
						[uU]*) ;; # Urgent desktop (unfocused/focused)

					# Desktop layout
					# Node state
						# TT|TP|TF) ;; # Tiled/Pseudo-tiled/Fullscreen
						LM|LT) # Monocle/Tiled
							# wm="${wm} ${name} "
							case "$(bspc query -T -d | jq -r .userLayout)" in
								tiled)   wm="${wm} T " ;;
								monocle) wm="${wm} M " ;;
							esac
						;;
				esac

				shift
			done
		;;
	esac

	SC="%{F#FFF}%{B#090909}"
	RC="%{F-}%{B-}"

	out=""

	[ ! -z "$wm" ]      && out="$out${SC}${wm}${RC} "
	[ ! -z "$time" ]    && out="$out${SC}${time}${RC} "
	[ ! -z "$date" ]    && out="$out${SC}${date}${RC} "
	[ ! -z "$battery" ] && out="$out${SC}${battery}${RC} "
	[ ! -z "$hotkey" ]  && out="$out${SC}${hotkey}${RC}"

	# printf "%s\n" "${SC}${wm}${RC} ${SC}${time}${RC} ${SC}${date}${RC} ${SC}${battery}${RC} ${SC}${hotkey}${RC}"
	printf "%s\n" "$out"
done
