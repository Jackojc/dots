colorscheme yuloo

# Plugins
source "%val{config}/rc/byline.kak"
source "%val{config}/rc/tabs.kak"
source "%val{config}/rc/surround.kak"
source "%val{config}/rc/kakboard.kak"

# Declare
declare-option str out_of_view_format ''
declare-option -hidden str out_of_view_status_line
declare-option -hidden int out_of_view_selection_above_count 0
declare-option -hidden int out_of_view_selection_below_count 0

# Default terminal emulator
declare-option str termcmd %sh{ printf %s\\n "st -e sh -c" }

# Words arrays to use for idsession.
declare-option str-list idsession_adjectives \
	"kantian"   "kaput"     "kashmiri"  "katabolic" "katari"    \
	"kayoed"    "kadenced"  "kaesarian" "kaffeinic" "kalcific"  \
	"kalorific" "kancelled" "kanicular" "kanine"    "kanonized" \
	"kapable"   "kapillary" "karamel"   "kareful"   "kasual"    \

declare-option str-list idsession_nouns \
	"keeper"    "keg"       "kernel"  "kerosene" "ketchup" "kettle"  \
	"key"       "keyboard"  "keyhole" "keynote"  "kick"    "kickoff" \
	"kid"       "kilometer" "kimono"  "kingdom"  "kiosk"   "kit"     \
	"kitchen"   "kite"      "kitten"  "klaxon"   "knife"   "knight"  \
	"knockdown" "knot"      "konga"   "kinesis"  "kicker"  "koala"   \
	"kangaroo"  "kraken"

# Temporary to store scrolloff when doing select view.
declare-option -hidden str _scrolloff

# Options
set-option global out_of_view_format '(↑%opt{out_of_view_selection_above_count}|↓%opt{out_of_view_selection_below_count})'

# Disable fancy indentation hooks.
set-option global disabled_hooks '(?!auto)\K(.+)-(trim-indent|insert|indent)'

set-option global tabstop 4
set-option global indentwidth 0
set-option global scrolloff 3,3
set-option global incsearch true
set-option global aligntab false
set-option global startup_info_version 99999999999
set-option global autoreload yes
set-option global ui_options ncurses_set_title=true ncurses_assistant=none ncurses_enable_mouse=true
set-option global modelinefmt_tabs '%opt{out_of_view_status_line}{{context_info}} {{mode_info}} %val{cursor_line}:%val{cursor_char_column}'
# set-option global yes_or_no_instant true

# Highlighters
add-highlighter global/ show-whitespaces
add-highlighter global/ show-matching
add-highlighter global/ number-lines -relative -hlcursor -min-digits 2
# add-highlighter global/ dynregex '%reg{/}' 0:+u  # highlight search matches

# New opens in the same buffer
map global normal <c-t> ': new buffer %val{bufname}<ret>' -docstring 'new client with same buffer'

# Scroll by halves rather than full pages
map global normal <pageup> '<c-u>'
map global normal <pagedown> '<c-d>'

# Surround mode
map global normal <c-s> ':surround<ret>'

# Show tab mode
map global normal b ': enter-user-mode tabs<ret>' -docstring 'tabs'
map global normal B ': enter-user-mode -lock tabs<ret>' -docstring 'tabs (lock)'

# Select view
map global normal <a-%> ': select-view<ret>' -docstring 'select view'
map global view s '<esc>: select-view<ret>' -docstring 'select view'

# Move lines
map global normal <c-down> ': move-line-below<ret>'
map global normal <c-up> ': move-line-above<ret>'

# Select lines
map global "normal" "x" ": byline-drag-down<ret>"
map global "normal" "X" ": byline-drag-up<ret>"

# Home/End
map global normal <end>  'gl'
map global normal <home> 'gh'

map global normal <s-end>  'Gl'
map global normal <s-home> 'Gh'

# Do not yank when using d/c
map global normal d <a-d>
map global normal c <a-c>

# Paste
# map global normal P ': paste-after<ret>'
# map global normal p ': paste-before<ret>'
# map global normal R ': paste-replace<ret>'

# map global normal p P
# map global normal P p

# Remap b to q
map global normal = q
map global normal <a-=> Q

# Select left/right word
map global normal q b
map global normal Q B
map global normal <a-q> <a-b>
map global normal <a-Q> <a-B>

# Backspace, delete and enter work in normal mode
map global normal <backspace> 'h<a-d>'
map global normal <ret> 'i<ret><esc>'
map global normal <del> '<a-d>'

# Comments
map global normal '#' ': comment-line<ret>'
map global normal '<a-#>' ': comment-block<ret>'

# Incr/decr
map global normal <c-a> ': inc-dec-modify-numbers + %val{count}<ret>'
map global normal <c-x> ': inc-dec-modify-numbers - %val{count}<ret>'

# Tab to cycle buffers
map global normal <tab> ': buffer-next<ret>'
map global normal <s-tab> ': buffer-previous<ret>'

# Buffer navigation
map global tabs a "ga" -docstring "↔ switch last buffer"
map global tabs F ": find-edit " -docstring "find & edit new file"
map global tabs f ": buffer " -docstring "show open buffers"
map global tabs l ": tab-nav next<ret>" -docstring "→ next tab"
map global tabs h ": tab-nav prev<ret>" -docstring "← prev tab"

map global tabs L ": tab-move next<ret>" -docstring "→ drag tab right"
map global tabs H ": tab-move prev<ret>" -docstring "← drag tab left"

map global tabs d ": delete-buffer<ret>" -docstring "delete (current)"
map global tabs D ": delete-saved-buffers<ret>" -docstring "delete (saved)"
map global tabs o ": delete-all-saved-except-current<ret>" -docstring "delete (saved, except current)"

# Readline mappings
map -docstring "move the cursor to the start of the line"        global insert <c-a> '<a-;>gh'
map -docstring "move the cursor to the end of the line"          global insert <c-e> '<esc>glli'
map -docstring "delete the character under the anchor"           global insert <c-d> '<a-;>c'
map -docstring "delete from the cursor to the start of the line" global insert <c-u> '<esc>h<a-h>c'
map -docstring "delete from the cursor to the end of the line"   global insert <c-k> '<esc><a-l>c'
map -docstring "delete until the next word boundary"             global insert <a-d> '<esc>ec'
map -docstring "delete until the previous word boundary"         global insert <c-w> '<esc>bc'
map -docstring "paste before the cursor"                         global insert <c-y> '<esc>Pi'

# Indent bindings
map -docstring 'indent' global insert <tab> '<a-;><a-gt>'
map -docstring 'deindent' global insert <s-tab> '<a-;><lt>'

# Remove trailing whitespaces on file save
hook global BufWritePre .* %{ try %{
	execute-keys -draft '%s[\h\v]+$<ret><a-d>'
}}

# Enable editorconfig
hook global WinCreate ^[^*]+$ %{ editorconfig-load }

# Copy indentation from last line on newline.
hook -group auto-indent global InsertChar '\n' %{
	# Copy previous line indent
	try %{ execute-keys -draft 'K<a-&>' }
	# Clean previous line indent
	try %{ execute-keys -draft 'k<a-x>s^\h+$<ret>d' }
}

# Update out-of-view status.
hook global NormalIdle .* %{
	out-of-view-update

	set-option window out_of_view_status_line ''

	evaluate-commands %sh{
		if test "$kak_opt_out_of_view_selection_above_count" -gt 0 -o "$kak_opt_out_of_view_selection_below_count" -gt 0; then
			printf 'set-option window out_of_view_status_line "%s"\n' "$kak_opt_out_of_view_format"
		fi
	}
}

# Highlight the currently focused line and columns 80 & 120.
hook global WinCreate .* %{ update_line_highlighter }
hook global -group crosshairs RawKey .* %{ update_line_highlighter }

# Add some highlighters for Rust and C++
hook global WinSetOption filetype=(c|cpp|rust) %{
	add-highlighter buffer/namespace regex [a-zA-Z](\w+)?(\h+)?(::) 0:namespace
	add-highlighter buffer/functions regex \w+(\h+)?(?=\() 0:function
}

# Rename session to something more human readable
hook global KakBegin .* %{ idsession }

# Delete text in scratch buffer
hook global BufCreate '^\*scratch\*$' %{ exec '%d' }

# Tab to cycle autocomplete matches
hook global InsertCompletionShow .* %{ try %{
	execute-keys -draft 'h<a-K>\h<ret>'
	map window insert <tab> <c-n>
	map window insert <s-tab> <c-p>
}}

hook global InsertCompletionHide .* %{
	unmap window insert <tab> <c-n>
	unmap window insert <s-tab> <c-p>
}

# Copy/paste
hook global WinCreate .* %{ kakboard-enable }
# hook global RegisterModified '"' %{ nop %sh{
# 	if [ -n "$DISPLAY" ]; then
# 		printf %s "$kak_main_reg_dquote" | xclip -in -selection clipboard >&- 2>&-

# 	elif [ -n "$TMUX" ]; then
# 		printf %s "$kak_main_reg_dquote" | tmux loadb -
# 	fi
# }}

define-command -hidden paste-before %{
	execute-keys ! %sh{
		if [ -n "$DISPLAY" ]; then
			printf 'xclip -o -selection clipboard'

		elif [ -n "$TMUX" ]; then
			printf 'tmux saveb -'
		fi
	} <ret>
}

define-command -hidden paste-after %{
	execute-keys <a-!> %sh{
		if [ -n "$DISPLAY" ]; then
			printf 'xclip -o -selection clipboard'

		elif [ -n "$TMUX" ]; then
			printf 'tmux saveb -'
		fi
	} <ret>
}

define-command -hidden paste-replace %{
	execute-keys <d>
	execute-keys ! %sh{
		if [ -n "$DISPLAY" ]; then
			printf 'xclip -o -selection clipboard'

		elif [ -n "$TMUX" ]; then
			printf 'tmux saveb -'
		fi
	} <ret>
}

define-command reset-search-register %{
	set-register slash ""
}

# Change session name to something more memorable.
define-command idsession %{ evaluate-commands %sh{
	seed="${kak_session}"

	# Pick a random adjective.
	eval set -- "${kak_opt_idsession_adjectives}"

	n=$(( seed % $# + 1 ))
	name_session=$(eval "printf %s \${${n}}")

	# Pick a random noun.
	eval set -- "${kak_opt_idsession_nouns}"

	n=$((seed % $# + 1))
	name_session="${name_session}-"$(eval "printf %s \${${n}}")

	printf 'rename-session "%s"' $(printf %s "${name_session}" | sed 's/"/""/g')
}}

# Incr/Decr.
define-command -params 2 inc-dec-modify-numbers %{
	evaluate-commands -save-regs 'c' %{
		# "c" stores the count we want to use (in decimal)
		set-register c %sh{ echo $(( $2 == 0 ? 1 : $2 )) }

		try %{
			# Search for tokens that look like hex numbers.
			execute-keys s \b0[Xx][0-9A-Fa-f]+\b <ret>
			# Apply our operator with shell arithmetic.
			execute-keys | "read val; printf '0x%%0*X\n' $((${#val} - 2)) $(($val %arg{1} %reg{c}))" <ret>

		} catch %{
			# Search for tokens that look like like new-style octal numbers.
			execute-keys s \b0[Oo][0-7]+\b <ret>
			# Convert them to old-style octal numbers, because that's all the
			# shell understands.
			execute-keys | "tr -d Oo" <ret>
			# Apply our operator with shell arithmetic.
			execute-keys | "read val; printf '0o%%0*o\n' $((${#val} - 1)) $(($val %arg{1} %reg{c}))" <ret>

		} catch %{
			# Search for tokens that look like zero-padded decimal numbers.
			execute-keys s [+-]?\b0[0-9]*\b <ret>
			# Apply our operator with shell arithmetic.
			execute-keys | "read val; printf '%%0*d\n' ${#val} $(($(echo ""$val"" | sed -E 's/^([-+])?0+/\1/') %arg{1} %reg{c}))" <ret>

		} catch %{
			# Search for tokens that look like unpadded decimal numbers.
			execute-keys s [+-]?\b[1-9][0-9]*\b <ret>
			# Apply our operator with shell arithmetic.
			execute-keys | "read val; printf '%%d\n' $(($val %arg{1} %reg{c}))" <ret>
		}
	}
}

# Edit commands.
define-command find-edit -params 1 -shell-script-candidates 'fd --type file' -docstring 'edit file' %{
	edit %arg{1}
}

define-command find-edit-all -params 1 -shell-script-candidates 'fd --hidden --no-ignore --type file' -docstring 'edit file' %{
	edit %arg{1}
}

define-command read-only -docstring 'make the buffer read-only' %{
	edit -readonly %val{bufname}
}

# Move selected lines below
define-command move-line-below -docstring 'move selected lines below' %{
	# Select whole lines
	execute-keys '<a-x><a-_><a-:>'

	# Iterate each selection and move the lines below
	evaluate-commands -itersel %{
		execute-keys -draft 'w'
		execute-keys -draft 'Zj<a-x>dzP'
	}
}

# Move selected lines above
define-command move-line-above -docstring 'move selected lines above' %{
	# Select whole lines
	execute-keys '<a-x><a-_><a-:>'

	# Iterate each selection and move the lines above
	evaluate-commands -itersel %{
		execute-keys -draft '<a-;>b'
		execute-keys -draft '<a-;>Zk<a-x>dzp'
	}
}

# Select current view.
define-command select-view -docstring 'select visible part of buffer' %{
	set-option window _scrolloff %opt{scrolloff}
	set-option window scrolloff 0,0

	execute-keys gtGbGl

	hook window -once NormalKey .* %{
		set-option window scrolloff %opt{_scrolloff}
	}
}

# Update focused line and columns
define-command update_line_highlighter %{
	# highlight focused line
	try %{ remove-highlighter window/highlight_focused_line }
	try %{ add-highlighter window/highlight_focused_line line %val{cursor_line} FocusedLine }

	# highlight column 80
	try %{ remove-highlighter window/highlight_column_80 }
	try %{ add-highlighter window/highlight_column_80 column 80 FocusedLine }

	# highlight column 120
	try %{ remove-highlighter window/highlight_column_120 }
	try %{ add-highlighter window/highlight_column_120 column 120 FocusedLine }
}

# Tmux
define-command -docstring "vsplit [<commands>]: split tmux vertically" vsplit -params .. -command-completion %{
	tmux-terminal-vertical kak -c %val{session} -e "%arg{@}"
}

define-command -docstring "hsplit [<commands>]: split tmux horizontally" split -params .. -command-completion %{
	tmux-terminal-horizontal kak -c %val{session} -e "%arg{@}"
}

define-command -docstring "tabnew [<commands>]: create new tmux window" tabnew -params .. -command-completion %{
	tmux-terminal-window kak -c %val{session} -e "%arg{@}"
}

# Set filetype of buffer
define-command -params 1 filetype %{
	eval "set-option buffer filetype %arg{1}"
}

# Don't overwrite existing files on save
define-command -params 0..1 better_write %{ evaluate-commands %sh{
	if [ -z ${1+x} ]; then
		# no param given: usual write
		echo "write"

	else
		bufname=$1
		if [ -e "${bufname}" ] && [ "${bufname}" != "${current_bufname}" ]; then
			# file already exists and is not the current one
			echo "echo 'file exists, use w!'"
		else
			echo "write ${bufname}"
		fi
	fi
}}

# Show out of view selections on status bar.
define-command -hidden out-of-view-update %{
	# Restore _t_ (top) and _b_ (bottom) registers.
	evaluate-commands -save-regs 'tb' %{
		# Window top line:
		evaluate-commands -draft %{
			execute-keys 'gt'
			set-register t %val{cursor_line}
		}

		# Window bottom line:
		evaluate-commands -draft %{
			execute-keys 'gb'
			set-register b %val{cursor_line}
		}

		# Proceed selections
		evaluate-commands %sh{
			selection_above_count=0
			selection_below_count=0
			window_top_line=$kak_reg_t
			window_bottom_line=$kak_reg_b

			eval "set -- $kak_selections_desc"

			# Selection description format: {anchor-line}.{anchor-column},{cursor-line}.{cursor-column}
			for selection do
				cursor=${selection#*,}
				cursor_line=${cursor%.*}
				cursor_column=${cursor#*.}

				if test "$cursor_line" -lt "$window_top_line"; then
					selection_above_count=$((selection_above_count + 1))

				elif test "$cursor_line" -gt "$window_bottom_line"; then
					selection_below_count=$((selection_below_count + 1))
				fi
			done

			printf 'set-option window out_of_view_selection_above_count %d\n' "$selection_above_count"
			printf 'set-option window out_of_view_selection_below_count %d\n' "$selection_below_count"
		}
	}
}

# Aliases
alias global n new

# alias global cd i-change-directory
# alias global db i-delete-buffer
# alias global q i-quit
# alias global w i-write

unalias global w write
alias global w better_write

alias global ro read-only
alias global fa find-edit-all
alias global f find-edit

# Change colours on focus change
hook global FocusIn .* %{
	set-face window FocusedLine        FocusedLine
	set-face window Default            Default
	set-face window BufferPadding      BufferPadding
	set-face window PrimarySelection   PrimarySelection
	set-face window SecondarySelection SecondarySelection
	set-face window PrimaryCursor      PrimaryCursor
	set-face window SecondaryCursor    SecondaryCursor
	set-face window PrimaryCursorEol   PrimaryCursorEol
	set-face window SecondaryCursorEol SecondaryCursorEol
	set-face window MenuForeground     MenuForeground
	set-face window MenuBackground     MenuBackground
	set-face window MenuInfo           MenuInfo
	set-face window StatusLine         StatusLine
	set-face window StatusLineMode     StatusLineMode
	set-face window StatusLineInfo     StatusLineInfo
	set-face window StatusLineValue    StatusLineValue
	set-face window StatusCursor       StatusCursor
	set-face window Information        Information
	set-face window Error              Error
	set-face window Prompt             Prompt
}

hook global FocusOut .* %{
	set-face window FocusedLine        InactiveFocusedLine
	set-face window Default            InactiveDefault
	set-face window BufferPadding      InactiveBufferPadding
	set-face window PrimarySelection   InactivePrimarySelection
	set-face window SecondarySelection InactiveSecondarySelection
	set-face window PrimaryCursor      InactivePrimaryCursor
	set-face window SecondaryCursor    InactiveSecondaryCursor
	set-face window PrimaryCursorEol   InactivePrimaryCursorEol
	set-face window SecondaryCursorEol InactiveSecondaryCursorEol
	set-face window MenuForeground     InactiveMenuForeground
	set-face window MenuBackground     InactiveMenuBackground
	set-face window MenuInfo           InactiveMenuInfo
	set-face window StatusLine         InactiveStatusLine
	set-face window StatusLineMode     InactiveStatusLineMode
	set-face window StatusLineInfo     InactiveStatusLineInfo
	set-face window StatusLineValue    InactiveStatusLineValue
	set-face window StatusCursor       InactiveStatusCursor
	set-face window Information        InactiveInformation
	set-face window Error              InactiveError
	set-face window Prompt             InactivePrompt
}

